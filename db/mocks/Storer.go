// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/amancooks08/BookMySport/db"
	mock "github.com/stretchr/testify/mock"
)

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

// AddVenue provides a mock function with given fields: _a0, _a1
func (_m *Storer) AddVenue(_a0 context.Context, _a1 *db.Venue) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.Venue) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BookSlot provides a mock function with given fields: _a0, _a1
func (_m *Storer) BookSlot(_a0 context.Context, _a1 *db.Booking) (float64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.Booking) (float64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *db.Booking) float64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *db.Booking) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelBooking provides a mock function with given fields: _a0, _a1
func (_m *Storer) CancelBooking(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckAvailability provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storer) CheckAvailability(_a0 context.Context, _a1 int, _a2 string) ([]*db.Slot, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*db.Slot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) ([]*db.Slot, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) []*db.Slot); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Slot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storer) CheckUser(_a0 context.Context, _a1 string, _a2 string) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckVenue provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Storer) CheckVenue(_a0 context.Context, _a1 string, _a2 string, _a3 string) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVenue provides a mock function with given fields: _a0, _a1
func (_m *Storer) DeleteVenue(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBookings provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetAllBookings(_a0 context.Context, _a1 int) ([]*db.Booking, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*db.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*db.Booking, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*db.Booking); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllVenues provides a mock function with given fields: _a0
func (_m *Storer) GetAllVenues(_a0 context.Context) ([]*db.Venue, error) {
	ret := _m.Called(_a0)

	var r0 []*db.Venue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*db.Venue, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*db.Venue); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Venue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooking provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetBooking(_a0 context.Context, _a1 int) (*db.Booking, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *db.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*db.Booking, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *db.Booking); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVenue provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetVenue(_a0 context.Context, _a1 int) (*db.Venue, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *db.Venue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*db.Venue, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *db.Venue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Venue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: _a0, _a1
func (_m *Storer) LoginUser(_a0 context.Context, _a1 string) (*db.LoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *db.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*db.LoginResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *db.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: _a0, _a1
func (_m *Storer) RegisterUser(_a0 context.Context, _a1 *db.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVenue provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storer) UpdateVenue(_a0 context.Context, _a1 *db.Venue, _a2 int) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.Venue, int) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStorer interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorer(t mockConstructorTestingTNewStorer) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
